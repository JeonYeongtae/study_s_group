# [ 1주차 | DB | HSY ]

Status: 완료
날짜: 2025/05/20 → 2025/05/26
선택: 1주차
작성자: 하수연

# **<Chapter 6. 데이터베이스>**

# 1. 데이터베이스의 큰 그림

## 🔻 데이터베이스

- **원하는 기능을 동작시키기 위해 마땅이 저장해야하는 정보의 집합**

### ✅ **데이터베이스를 사용하는 이유**

- **불필요한 중복 저장 多**
- **데이터 일관성 및 무결성 제공 어려움**
- **데이터 변경 시 연관 데이터 변경 어려움**
- **정교한 검색 어려움**
- **백업 및 복구 어려움**
    
    

### ✅ 데이터베이스의 저장 단위

- **엔티티 - 독립적으로 존재할 수 있는 객체**
- **속성 - 엔티티의 특성**
- **엔티티 집합 - 같은 속성을 공유하는 개별 엔티티의 집합**

- **DBMS 엔티티 표현 방식**
    - **RDBMS - 테이블(표)**
    
            개별 레코드 → 테이블의 행으로 표현     |     필드 → 테이블의 열로 표현
    
    ---
    
    - **MongoDB - 컬렉션**
    
            개별 레코드 → 도큐먼트(JSON 형태 데이터)로 표현    |     필드 → json 키 형태로 표현
    
    ---
    

### ✅ 스키마

- **데이터베이스에 저장되는 레코드 구조 및 제약 조건**

### ✅ 트랜잭션 및 ACID

### ☑️ **트랜잭션**

- 데이터베이스와의 논리적 상호작용 단위

### ☑️ ACID

### 지속성

- **성공적으로 완료된 트랜잭션의 결과가 영구적으로 반영되는 성질**

### **격리성**

- **동시에 동작하는 여러 트랜잭션이 서로 간섭하지 않도록 보장하는 성질**

### **원자성**

- **하나의 트랜잭션 결과 → 모두 성공 or 모두 실패**

### **일관성**

- **트랜잭션 전 후 데이터베이스가 갖는 일관된 상태**

### ✅ 데이터베이스 지도

![image.png](image.png)

## 🔻 DBMS

- **데이터베이스를 관리하기 위한 프로그램**

### ✅  DBMS 종류

| **관계형 테이터베이스 관리 시스템(RDBMS)** | **NoSQL 관리 시스템(NoSQL DBMS)** |
| --- | --- |
| → MySQL, Oracle, PostgreSQL, SQLite, MariaDB, Microsoft SQL Server | → MongoDB, Redis |

### ✅ SQL 종류

- **SQL ( RDBMS 전용 언어 )**

![image.png](image%201.png)

![image.png](image%202.png)

 

# 2. RDBMS의 기본

## 🔻테이블의 구성

### ✅ 필드

- **관계형 데이터베이스(RDBMS)에서 테이블의 한 열(Column)에 해당하는 속성(attribute)**
- **하나의 필드는 한 종류의 데이터 타입을 가지며, 모든 레코드는 동일한 필드 구조를 공유**

- **필드 타입**

![image.png](image%203.png)

### ✅ 키

- **테이블 내의 특정 레코드를 식별할 수 있는 필드의 집합**
- **레코드의 식별 뿐만 아니라 테이블 간의 참조에서도 사용**

### ☑️ **키의 종류**

- **기본 키**

    한 레코드를 식별하도록 선정되어 테이블 당 하나만 존재할 수 있는 키

---

- **후보 키**

     테이블의 한 레코드를 식별하기 위한 필드의 최소 집합

---

- **복합키**

     두 필드 이상으로 구성된 후보 키

---

- **슈퍼 키**

     레코드를 식별하기 위한 필드의 최소 집합이 아닌, 레코드를 식별하기 위한 필드의 집합

---

- **대체 키**

     기본 키가 아닌 후보 키

---

- **외래 키**

     다른 테이블의 기본 키를 잠조하는 필드 → 테이블 간의 참조관계 형성 시 사용

---

## 🔻테이블의 관계

### ✅ 일대일 대응 관계

- **하나의 레코드 <=> 하나의 레코드**

![image.png](image%204.png)

### ✅ 일대다 대응 관계

- **하나의 레코드  <=> 여러 레코드**

![image.png](image%205.png)

### ✅ 다대다 대응 관계

- **여러 레코드 <=> 여러 레코드**

![image.png](image%206.png)

## 🔻무결성 제약 조건

- **데이터베이스에 저장된 데이터의 일관성과 유효성을 유지하기 위해 마땅히 지켜야하는 조건**

### ✅ 도메인 제약 조건

- **테이블이 가질 수 있는 필드 타입과 범위에 대한 규칙**

### ✅ 키 제약 조건

- **레코드를 교유하게 식별할 수 있는 키로 지정된 필드에 중복된 값에 존재해서는 안됨.**

### ✅ 엔티티 무결성 제약 조건

- **기본키로 지정한 필드는 고유한 값이어야 하며, NULL 이 되어서는 안됨.**

### ✅ 참조 무결성 제약 조건

- **외래 키를 통해 다른 테이블을 참조할 때 데이터와 일관성을 지키기 위한 제약 조건**

 

### 

### 

     

## 

###
